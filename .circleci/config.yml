#  circleci config for secret-keeper
#
version: 2.1

# ----------------------------
# Steps
# ----------------------------

step-ensure-libssl: &step-ensure-libssl
  # needed for compiling some rust dependencies on circleci debian image
  #     (oath->ring, tokio/tls)
  run:
    name: Install libssl
    command: |
      sudo apt-get update \
          && sudo apt-get install -y pkg-config openssl libssl-dev

step-local-net-config: &step-local-net-config
  # import secrets when running locally
  run:
    name: Get local config
    command: |
      if [ -n "$LOCAL_CONFIG_URL" ]; then
        curl -sS -o /tmp/local_cfg.sh "$LOCAL_CONFIG_URL"
        bash /tmp/local_cfg.sh
      fi
      echo "new base-config: fname=$BASH_ENV"
      cat "$BASH_ENV"

step-fix-github: &step-fix-github
  run:
    # undo circle github setting so cargo checkouts work
    # this step should immediately follow 'checkout'
    name: Unset CircleCI's forced conversion of HTTPS->SSH
    command: |
      if [ -z "$LOCAL_CONFIG_URL" ]; then
        git config --global --unset "url.ssh://git@github.com.insteadof"
      fi

step-build-all: &step-build-all
  run:
    name: Build all packages
    command: |
      if [ "$BUILD_MODE" = "release" ]; then
        cargo build --workspace --release
      else
        cargo build --workspace
      fi

step-setup-vault: &step-setup-vault
  run:
    name: setup-vault
    command: |
      ci/vault-enable-transit

step-test-libs: &step-test-libs
  run:
    name: Test libs and docs
    command: |
      cargo test --workspace

step-test-encrypt-cli: &step-test-encrypt-cli
  run:
    name: Test encrypt cli
    command: |
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-env
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-cloudkms
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-hashivault

step-cargo-audit: &step-cargo-audit
  run:
    name: RustSec Advisory Audit
    command: |
      cargo install --force cargo-audit
      cargo generate-lockfile
      cargo audit

step-show-config: &step-show-config
  run:
    name: Show build config
    command: |
      echo "Build mode:    $BUILD_MODE"
      echo "Rust channel:  $RUST_VER"
      echo "Rust release:  $(rustc --version)"
      echo "Debian:        $(cat /etc/debian_version)"



# ----------------------------
#  Orbs
# ----------------------------
orbs:
  gcp-cli: circleci/gcp-cli@1.8


# ----------------------------
#  Docker images
# ----------------------------
executors:
  rust-docker:
    parameters:
      img:
        type: string
        default: "cimg/rust:1.44"
    docker:
      - image: << parameters.img >>
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/gcloud-service-key.json
          VAULT_ADDR: http://vault:8200/
          VAULT_TOKEN: root
      - image: vault:1.4.2
        name: vault
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_ADDR: http://vault:8200/
          VAULT_TOKEN: root


# ----------------------------
#  Command pipelines
# ----------------------------
commands:
  build-test:
    description: "Setup, build, and run all tests"
    steps:
      - *step-ensure-libssl
      - *step-local-net-config
      - *step-show-config
      - checkout
      - *step-fix-github
      - *step-setup-vault
      - *step-build-all
      - *step-test-libs
      - *step-test-encrypt-cli

  sec-audit:
    description: "RustSec scan"
    steps:
      - *step-ensure-libssl
      - checkout
      - *step-fix-github
      - *step-cargo-audit

  step-create-cloudkms-key:
    steps:
      - run:
          command: |
            # create keyring if it doesn't exist
            if [ -n "$CLOUDKMS_KEYRING_NAME" ]; then
              gcloud kms keyrings describe $CLOUDKMS_KEYRING_NAME \
                --project $GCLOUD_PROJECT_ID \
                --location $GCLOUD_COMPUTE_ZONE \
                >/dev/null 2>&1 \
                || gcloud kms keyrings create $CLOUDKMS_KEYRING_NAME \
                --project $GCLOUD_PROJECT_ID \
                --location $GCLOUD_COMPUTE_ZONE
            fi
            # create key if it doesn't exist
            if [ -n "$CLOUDKMS_KEY_NAME" ]; then
              gcloud kms keys describe $CLOUDKMS_KEY_NAME \
                --project $GCLOUD_PROJECT_ID \
                --location $GCLOUD_COMPUTE_ZONE \
                --keyring $CLOUDKMS_KEYRING_NAME \
                >/dev/null 2>&1 \
                || gcloud kms keys create $CLOUDKMS_KEY_NAME \
                --project $GCLOUD_PROJECT_ID \
                --location $GCLOUD_COMPUTE_ZONE \
                --keyring $CLOUDKMS_KEYRING_NAME \
                --purpose encryption
            fi

# ----------------------------
#  Jobs
# ----------------------------
jobs:
  build:
    parameters:
      img:
        type: string
        default: "cimg/rust:1.44"
      mode:
        type: enum
        enum: [ debug, release ]
        default: debug
      rustver:
        type: enum
        enum: [ stable, nightly ]
        default: stable
    executor:
      name: rust-docker
      img: << parameters.img >>
    environment:
      - BUILD_MODE: << parameters.mode >>
      - RUST_VER: << parameters.rustver >>
    steps:
      - when:
          condition:
            equal: [ nightly, << parameters.rustver >> ]
          steps:
          - run: rustup default nightly
      - build-test

  # init cloudkms keyring and key; runs inside separate gcloud sdk docker
  cloudkms_setup:
    description: Initialize gcloud sdk and cloudkms keys
    executor: gcp-cli/default
    steps:
      - gcp-cli/install:
          version: 300.0.0
      - gcp-cli/initialize
      - step-create-cloudkms-key


  sec-audit:
    description: "Scan for reported vulnerabilities from RustSec Advisory Database"
    executor:
      name: rust-docker
      img: "cimg/rust:1.44"
    steps:
      - sec-audit


# ----------------------------
#  Workflows
# ----------------------------
workflows:
  default:
    jobs:
      - cloudkms_setup
      - build:
          matrix:
            parameters:
              mode: [ debug ]
              rustver: [ stable ]

  variants:
    jobs:
      - build:
          matrix:
            parameters:
              mode: [ debug, release ]
              rustver: [ stable, nightly ]


  # Daily scan for reported vulnerabilities
  secaudit:
    jobs:
      - sec-audit
    triggers:
      - schedule:
          cron: "0 18 * * *" # 6pm UTC daily
          filters:
            branches:
              only:
                - master

