version: 2.1

step-ensure-libssl: &step-ensure-libssl
  # needed to for compiling some rust dependencies on circleci debian image
  #     (oath->ring, tokio/tls)
  run:
    name: Install libssl
    command: |
      sudo apt-get update \
          && sudo apt-get install -y pkg-config openssl libssl-dev

step-gcloud-cli-install: &step-gcloud-cli-install
  # Install Google Cloud SDK (gcloud cli)
  run:
    name: Install gcloud
    command: |
      curl -sS https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-300.0.0-linux-x86_64.tar.gz\
         | (cd $HOME;  tar xz)
      echo 'export PATH=/home/circleci/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
      if [ -n "$GCLOUD_SERVICE_KEY" ]; then
        echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
      fi

step-gcloud-cli-init: &step-gcloud-cli-init
  # Initialize Google Cloud SDK (gcloud cli)
  run:
    name: Initialize gcloud
    command: |
      gcloud auth activate-service-account "--key-file=$GOOGLE_APPLICATION_CREDENTIALS"
      gcloud config set project $GOOGLE_PROJECT_ID --installation

step-local-net-config: &step-local-net-config
  # import secrets when running locally
  run:
    name: Get local config
    command: |
      if [ -n "$LOCAL_CONFIG_URL" ]; then
        curl -sS -o /tmp/local_cfg.sh "$LOCAL_CONFIG_URL"
        bash /tmp/local_cfg.sh
      fi

step-verify-build-requirements: &step-verify-build-requirements
  # perform sanity tests before we get started
  # also check build variables
  run:
    name: Verify build requirements
    command: |
      [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ] \
          && echo "Environment must define GOOGLE_APPLICATION_CREDENTIALS" && exit 1
      [ -z "$GOOGLE_PROJECT_ID" ] \
          && echo "Environment must define GOOGLE_PROJECT_ID" && exit 1
      [ ! -f "$GOOGLE_APPLICATION_CREDENTIALS" ] \
          && echo "Credentials file missing" && exit 1
      (command -v rustc) || ( echo "Rust not installed" && exit 1 )
      (command -v gcloud) || ( echo "Google Cloud SDK not installed" && exit 1 )
      if [ -d /home/circleci/.ssh ]; then
        ls -al /home/circleci/.ssh
      else
        echo no ssh folder
      fi
      if [ "$BUILD_MODE" != "debug" ] && [ "$BUILD_MODE" != "release" ]; then
        echo "Invalid BUILD_MODE: should be 'debug' or 'release'"
        exit 1
      fi
      if [ "$RUST_VER" != "stable" ] && [ "$RUST_VER" != "nightly" ]; then
        echo "Invalid RUST_VER: should be 'stable' or 'nightly'"
        exit 1
      fi

step-select-rustver: &step-select-rustver
  run:
    # use rust-stable (default) or switch to nightly
    name: Select rust version
    command: |
      if [ "$RUST_VER" = "nightly" ]; then
        rustup default nightly
      fi

step-fix-github: &step-fix-github
  run:
    # undo circle github setting so cargo checkouts work
    # this step should immediately follow 'checkout'
    name: Unset CircleCI's forced conversion of HTTPS->SSH
    command: |
      if [ -z "$LOCAL_CONFIG_URL" ]; then
        git config --global --unset "url.ssh://git@github.com.insteadof"
      fi

step-build-all: &step-build-all
  run:
    name: Build all packages
    command: |
      if [ "$BUILD_MODE" = "release" ]; then
        cargo build --workspace --release
      else
        cargo build --workspace
      fi

step-setup-vault: &step-setup-vault
  run:
    name: setup-vault
    command: |
      ci/vault-enable-transit

step-test-libs: &step-test-libs
  run:
    name: Test libs and docs
    command: |
      cargo test --workspace

step-test-encrypt-cli: &step-test-encrypt-cli
  run:
    name: Test encrypt cli
    command: |
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-env
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-cloudkms
      PROG=target/$BUILD_MODE/encrypt ./examples/encrypt-rs/test-hashivault
  
step-cargo-audit: &step-cargo-audit
  run:
    name: RustSec Advisory Audit
    command: |
      cargo install --force cargo-audit
      cargo generate-lockfile
      cargo audit

step-show-config: &step-show-config
  run:
    name: Show build config
    command: |
      echo "Build mode:    $BUILD_MODE"
      echo "Rust channel:  $RUST_VER"
      echo "Rust release:  $(rustc --version)"
      echo "Debian:        $(cat /etc/debian_version)"
      #echo "Gcloud SDK:    $(gcloud --version)"
      #echo "Git user:      $(git config --get user.email)"

executors:
  rust-docker:
    parameters:
      img:
        type: string
        default: "cimg/rust:1.44"
    docker:
      - image: << parameters.img >>
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/gcloud-service-key.json
          VAULT_ADDR: http://vault:8200/
          VAULT_TOKEN: root
      - image: vault:1.4.2
        name: vault
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_ADDR: http://vault:8200/
          VAULT_TOKEN: root


commands:
  build-test:
    description: "Setup, build, and run all tests"
    steps:
      - *step-local-net-config
      - *step-ensure-libssl
      - *step-gcloud-cli-install
      - *step-gcloud-cli-init
      - *step-verify-build-requirements
      - *step-show-config
      - *step-select-rustver
      - checkout
      - *step-fix-github
      - *step-setup-vault
      - *step-build-all
      - *step-test-libs
      - *step-test-encrypt-cli
  

jobs:
  build:
    parameters:
      img:
        type: string
        default: "cimg/rust:1.44"
      mode:
        type: string
        default: "debug"
      rustver:
        type: string
        default: "stable"
    executor:
      name: rust-docker
      img: << parameters.img >>
    environment:
      - BUILD_MODE: << parameters.mode >>
      - RUST_VER: << parameters.rustver >>
    steps:
      - build-test

  sec-audit:
    description: "Scan for reported vulnerabilities from RustSec Advisory Database"
    executor:
      name: rust-docker
      img: "cimg/rust:latest"
    steps:
      #- *step-ensure-libssl
      - checkout
      - *step-fix-github
      - *step-cargo-audit


workflows:
  default:
    jobs:
      - build:
          matrix:
            parameters:
              mode: ["debug"]
              rustver: ["stable"]

  variants:
    jobs:
      - build:
          matrix:
            parameters:
              mode: ["debug", "release"]
              rustver: ["stable", "nightly"]


  # scan dependencies for reported vulnerabilities, daily
  secaudit:
    jobs:
      - sec-audit
    triggers:
      - schedule:
          cron: "0 18 * * *" # daily 6pm UTC 
          filters:
            branches:
              only:
                - master


